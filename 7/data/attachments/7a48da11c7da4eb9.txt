# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Tests for the employee management functionality in the OrangeHRM system >> TC_003: Verify that a new User can be logged in after registering as a new Employee
- Location: /home/runner/work/OrangeHRM/OrangeHRM/tests/pimPage.spec.ts:71:7

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toContainText(expected)

Locator: locator('h6.oxd-text:has-text("Dashboard")')
Expected string: "Dashboard"
Received: <element(s) not found>
Call log:
  - expect.toContainText with timeout 5000ms
  - waiting for locator('h6.oxd-text:has-text("Dashboard")')

    at /home/runner/work/OrangeHRM/OrangeHRM/tests/pimPage.spec.ts:98:51
```

# Page snapshot

```yaml
- complementary:
  - navigation "Sidepanel":
    - link "client brand banner":
      - img "client brand banner"
    - textbox "Search"
    - button ""
    - separator
    - list:
      - listitem:
        - link "Leave"
      - listitem:
        - link "Time"
      - listitem:
        - link "My Info"
      - listitem:
        - link "Performance"
      - listitem:
        - link "Dashboard"
      - listitem:
        - link "Directory"
      - listitem:
        - link "Claim":
          - img
          - text: Claim
      - listitem:
        - link "Buzz"
- banner:
  - heading "PIM" [level=6]
  - list:
    - listitem:
      - img "profile picture"
      - paragraph: Ernie Emard
      - text: 
  - navigation "Topbar Menu":
    - list:
      - button ""
- heading "Ernie Emard" [level=6]
- img "profile picture"
- tablist:
  - tab "Personal Details":
    - link "Personal Details"
  - tab "Contact Details":
    - link "Contact Details"
  - tab "Emergency Contacts":
    - link "Emergency Contacts"
  - tab "Dependents":
    - link "Dependents"
  - tab "Immigration":
    - link "Immigration"
  - tab "Job":
    - link "Job"
  - tab "Salary":
    - link "Salary"
  - tab "Report-to":
    - link "Report-to"
  - tab "Qualifications":
    - link "Qualifications"
  - tab "Memberships":
    - link "Memberships"
- heading "Personal Details" [level=6]
- separator
- text: Employee Full Name*
- textbox "First Name": Ernie
- textbox "Middle Name": Bailey
- textbox "Last Name": Emard
- separator
- text: Employee Id
- textbox [disabled]: "6863456"
- text: Other Id
- textbox
- text: Driver's License Number
- textbox [disabled]
- text: License Expiry Date
- textbox "yyyy-dd-mm"
- text: 
- separator
- text: Nationality -- Select --  Marital Status -- Select --  Date of Birth
- textbox "yyyy-dd-mm" [disabled]
- text:  Gender
- radio "Male"
- text: Male
- radio "Female"
- text: Female
- separator
- paragraph: "* Required"
- button "Save"
- separator
- heading "Custom Fields" [level=6]
- separator
- text: Blood Type -- Select --  Test_Field
- textbox
- separator
- button "Save"
- separator
- heading "Attachments" [level=6]
- button " Add"
- separator
- text: No Records Found
- table:
  - rowgroup:
    - row " File Name Description Size Type Date Added Added By Actions":
      - columnheader "":
        - checkbox ""
        - text: 
      - columnheader "File Name"
      - columnheader "Description"
      - columnheader "Size"
      - columnheader "Type"
      - columnheader "Date Added"
      - columnheader "Added By"
      - columnheader "Actions"
  - rowgroup
- paragraph: OrangeHRM OS 5.7
- paragraph:
  - text: © 2005 - 2025
  - link "OrangeHRM, Inc"
  - text: . All rights reserved.
```

# Test source

```ts
   1 | import { test, expect, Page } from '@playwright/test';
   2 | import { LoginPage } from '../PageObjects/loginPage.ts';
   3 | import { BasePage } from '../PageObjects/basePage.ts';
   4 | import { PIMPage } from '../PageObjects/pimPage.ts';
   5 |
   6 | import { userTestData } from '../fixtures/genUser';
   7 | import text from "../fixtures/text.json" assert { type: "json" };
   8 |
   9 | const genUser = userTestData();
   10 |
   11 | test.describe('Tests for the employee management functionality in the OrangeHRM system', () => {
   12 |
   13 |   let genUser: ReturnType<typeof userTestData>;
   14 |
   15 |   test.beforeEach(async ({ page }: { page: Page }) => {
   16 |     genUser = userTestData();
   17 |     const loginPage = new LoginPage(page);
   18 |     await loginPage.gotoLoginPage();
   19 |     await loginPage.fillUsernameField(genUser.adminUsername);
   20 |     await loginPage.fillPasswordField(genUser.adminPassword);
   21 |     await loginPage.clickLoginButton();
   22 |   });
   23 |
   24 |   test('TC_001: Adding a New Employee (autogenerated EmployeeID) from Administrator account', async ({ page }: { page: Page }) => {
   25 |     const pimPage = new PIMPage(page);
   26 |
   27 |     await pimPage.clickButtonPIM();
   28 |     await pimPage.clickAddEmployeeButton();
   29 |     await pimPage.clickEmployeeAddPhotoButton();
   30 |     await pimPage.fileInput.setInputFiles(text.pimPage.filePath);
   31 |     await expect(pimPage.filePreview).toBeVisible();
   32 |
   33 |     await pimPage.fillFirstNameField(genUser.firstname);
   34 |     await pimPage.fillMiddleNameField(genUser.middlename);
   35 |     await pimPage.fillLastNameField(genUser.lastname);
   36 |     await pimPage.clickCreateLoginDetailsButton();
   37 |     await pimPage.fillUsernameField(genUser.username);
   38 |     const password = await pimPage.fillPasswordField(genUser.password);
   39 |     await pimPage.fillConfirmPasswordField(password);
   40 |     await pimPage.checkStatusEnabled();
   41 |     await pimPage.clickSaveButton();
   42 |
   43 |     await expect(await pimPage.successSavedMessage).toBeVisible();
   44 |     await expect(await pimPage.personalDetailsHeader).toContainText(text.pimPage.personalDetailsHeader);
   45 |   });
   46 |
   47 |   test('TC_002: Adding a New Employee (changing EmployeeID) from Administrator account', async ({ page }: { page: Page }) => {
   48 |     const pimPage = new PIMPage(page);
   49 |
   50 |     await pimPage.clickButtonPIM();
   51 |     await pimPage.clickAddEmployeeButton();
   52 |     await pimPage.clickEmployeeAddPhotoButton();
   53 |     await pimPage.fileInput.setInputFiles(text.pimPage.filePath);
   54 |     await expect(pimPage.filePreview).toBeVisible();
   55 |
   56 |     await pimPage.fillFirstNameField(genUser.firstname);
   57 |     await pimPage.fillMiddleNameField(genUser.middlename);
   58 |     await pimPage.fillLastNameField(genUser.lastname);
   59 |     await pimPage.changeEmployeeID(`${genUser.id}`);
   60 |     await pimPage.clickCreateLoginDetailsButton();
   61 |     await pimPage.fillUsernameField(genUser.username);
   62 |     const password = await pimPage.fillPasswordField(genUser.password);
   63 |     await pimPage.fillConfirmPasswordField(password);
   64 |     await pimPage.checkStatusEnabled();
   65 |     await pimPage.clickSaveButton();
   66 |
   67 |     await expect(await pimPage.successSavedMessage).toBeVisible();
   68 |     await expect(await pimPage.personalDetailsHeader).toContainText(text.pimPage.personalDetailsHeader);
   69 |   });
   70 |
   71 |   test('TC_003: Verify that a new User can be logged in after registering as a new Employee', async ({ page }: { page: Page }) => {
   72 |     const pimPage = new PIMPage(page);
   73 |     const loginPage = new LoginPage(page);
   74 |     const basePage = new BasePage(page);
   75 |
   76 |     await pimPage.clickButtonPIM();
   77 |     await pimPage.clickAddEmployeeButton();
   78 |     await pimPage.fillFirstNameField(genUser.firstname);
   79 |     await pimPage.fillMiddleNameField(genUser.middlename);
   80 |     await pimPage.fillLastNameField(genUser.lastname);
   81 |     await pimPage.changeEmployeeID(`${genUser.id}`);
   82 |     await pimPage.clickCreateLoginDetailsButton();
   83 |     const username = await pimPage.fillUsernameField(genUser.username);
   84 |     const password = await pimPage.fillPasswordField(genUser.password);
   85 |     await pimPage.fillConfirmPasswordField(password);
   86 |     await pimPage.checkStatusEnabled();
   87 |     await pimPage.clickSaveButton();
   88 |     await page.waitForTimeout(2000);
   89 |
   90 |     await expect(await pimPage.successSavedMessage).toBeVisible();
   91 |     await expect(await pimPage.personalDetailsHeader).toContainText(text.pimPage.personalDetailsHeader);
   92 |
   93 |     await pimPage.clickDropdownUserMenu();
   94 |     await pimPage.clickLogoutButton();
   95 |     await loginPage.fillUsernameField(username);
   96 |     await loginPage.fillPasswordField(password);
   97 |     await loginPage.clickLoginButton();
>  98 |     await expect(await basePage.dashboardHeading).toContainText(text.basePage.dashboardHeading);
      |                                                   ^ Error: Timed out 5000ms waiting for expect(locator).toContainText(expected)
   99 |   });
  100 |
  101 |   test('TC_004: Verify that an administrator can successfully edit an employee\'s details', async ({ page }: { page: Page }) => {
  102 |     const pimPage = new PIMPage(page);
  103 |     const loginPage = new LoginPage(page);
  104 |     const basePage = new BasePage(page);
  105 |
  106 |     await pimPage.clickButtonPIM();
  107 |     await pimPage.clickAddEmployeeButton();
  108 |     await pimPage.fillFirstNameField(genUser.firstname);
  109 |     await pimPage.fillMiddleNameField(genUser.middlename);
  110 |     await pimPage.fillLastNameField(genUser.lastname);
  111 |     await pimPage.changeEmployeeID(`${genUser.id}`);
  112 |     await pimPage.clickCreateLoginDetailsButton();
  113 |     await pimPage.fillUsernameField(genUser.username);
  114 |     const password = await pimPage.fillPasswordField(genUser.password);
  115 |     await pimPage.fillConfirmPasswordField(password);
  116 |     await pimPage.checkStatusEnabled();
  117 |     await pimPage.clickSaveButton();
  118 |
  119 |     await expect(await pimPage.successSavedMessage).toBeVisible();
  120 |     await expect(await pimPage.personalDetailsHeader).toContainText(text.pimPage.personalDetailsHeader);
  121 |
  122 |     await pimPage.clickDropdownUserMenu();
  123 |     await pimPage.clickLogoutButton();
  124 |     await loginPage.fillUsernameField(genUser.adminUsername);
  125 |     await loginPage.fillPasswordField(genUser.adminPassword);
  126 |     await loginPage.clickLoginButton();
  127 |
  128 |     await pimPage.clickButtonPIM();
  129 |     await expect(page).toHaveURL(text.pimPage.url);
  130 |
  131 |     await pimPage.clickFirstPencilIconForEdit();
  132 |     await page.waitForTimeout(2000);
  133 |     const newLastName = await pimPage.editLastNameInputValue(text.pimPage.editedLastName);
  134 |     await pimPage.clickSavePersonalDetailsButton();
  135 |     await expect(await pimPage.successSavedMessage).toBeVisible();
  136 |
  137 |     await pimPage.clickButtonPIM();
  138 |     await pimPage.clickEmployeeListButton();
  139 |     await expect(await pimPage.getFirstLastNameTableValue()).toBe(newLastName);
  140 |   });
  141 |
  142 | });
  143 |
```