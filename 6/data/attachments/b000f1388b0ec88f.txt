# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Tests for the employee management functionality in the OrangeHRM system >> Verify that an administrator can successfully edit an employee's details
- Location: /home/runner/work/OrangeHRM/OrangeHRM/tests/pimPage.spec.js:75:7

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toBeVisible()

Locator: locator('.oxd-toast--success')
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 5000ms
  - waiting for locator('.oxd-toast--success')

    at /home/runner/work/OrangeHRM/OrangeHRM/tests/pimPage.spec.js:93:53
```

# Page snapshot

```yaml
- complementary:
  - navigation "Sidepanel":
    - link "client brand banner":
      - img "client brand banner"
    - textbox "Search"
    - button ""
    - separator
    - list:
      - listitem:
        - link "Admin"
      - listitem:
        - link "PIM"
      - listitem:
        - link "Leave"
      - listitem:
        - link "Time"
      - listitem:
        - link "Recruitment"
      - listitem:
        - link "My Info"
      - listitem:
        - link "Performance"
      - listitem:
        - link "Dashboard"
      - listitem:
        - link "Directory"
      - listitem:
        - link "Maintenance"
      - listitem:
        - link "Claim":
          - img
          - text: Claim
      - listitem:
        - link "Buzz"
- banner:
  - heading "PIM" [level=6]
  - link "Upgrade":
    - button "Upgrade"
  - list:
    - listitem:
      - img "profile picture"
      - paragraph: manda user
      - text: 
  - navigation "Topbar Menu":
    - list:
      - listitem: Configuration 
      - listitem:
        - link "Employee List"
      - listitem:
        - link "Add Employee"
      - listitem:
        - link "Reports"
      - button ""
- heading "Add Employee" [level=6]
- separator
- textbox
- img "profile picture"
- button ""
- paragraph: "Accepts jpg, .png, .gif up to 1MB. Recommended dimensions: 200px X 200px"
- text: Employee Full Name*
- textbox "First Name": Frida
- textbox "Middle Name": Rory
- textbox "Last Name": Rodriguez
- text: Employee Id
- textbox: "126394"
- text: Employee Id already exists
- separator
- paragraph: Create Login Details
- checkbox [checked]
- text: Username*
- textbox: JosianeioFIy
- text: Username already exists Status
- radio "Enabled" [checked]
- text: Enabled
- radio "Disabled"
- text: Disabled Strongest Password*
- textbox: WJl91hFYQ5LW0bt
- paragraph: For a strong password, please use a hard to guess combination of text with upper and lower case characters, symbols and numbers
- text: Confirm Password*
- textbox: WJl91hFYQ5LW0bt
- separator
- paragraph: "* Required"
- button "Cancel"
- button "Save"
- paragraph: OrangeHRM OS 5.7
- paragraph:
  - text: © 2005 - 2025
  - link "OrangeHRM, Inc"
  - text: . All rights reserved.
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test'
   2 | import { LoginPage } from'../PageObjects/loginPage'
   3 | import { BasePage } from '../PageObjects/basePage'
   4 | import { PIMPage } from '../PageObjects/pimPage'
   5 |
   6 | import { userTestData } from '../fixtures/genUser'
   7 | import text from "../fixtures/text.json" assert { type: "json" }
   8 |
   9 | const genUser = userTestData();
   10 |
   11 |
   12 | test.describe ('Tests for the employee management functionality in the OrangeHRM system', () => {
   13 |
   14 |   test.beforeEach(async ({ page }) => {
   15 |     const loginPage = new LoginPage(page);
   16 |     await loginPage.gotoLoginPage();
   17 |     await loginPage.fillIUsernameField(genUser.adminUsername);
   18 |     await loginPage.fillpasswordField(genUser.adminPassword);
   19 |     await loginPage.clickLoginButton();
   20 |   })
   21 |
   22 |   test('Adding a New Employee from Administrator account', async ({ page }) => {
   23 |     const pimPage = new PIMPage(page)
   24 |
   25 |     await pimPage.clickButtonPIM();
   26 |     await pimPage.clickAddEmployeeButton();
   27 |     await pimPage.clickEmployeeAddPhotoButton();
   28 |     await pimPage.fileInput.setInputFiles(text.pimPage.filePath);
   29 |     await expect(pimPage.filePreview).toBeVisible();
   30 |
   31 |     await pimPage.fillFirstNameField(genUser.firstname);
   32 |     await pimPage.fillMiddleNameField(genUser.middlename);
   33 |     await pimPage.fillLastNameField(genUser.lastname);
   34 |     await pimPage.changeEmployeeID(`${genUser.id}`);
   35 |     await pimPage.clickCreateLoginDetailsButton();
   36 |     await pimPage.fillUsernameField(genUser.username);
   37 |     const password = await pimPage.fillPasswordField(genUser.password);
   38 |     await pimPage.fillConfirmPasswordField(password);
   39 |     await pimPage.checkStatusEnabled();
   40 |     await pimPage.clickSaveButton();
   41 |
   42 |     await expect(await pimPage.successSavedMessage).toBeVisible()
   43 |     await expect(await pimPage.personalDetailsHeader).toContainText(text.pimPage.personalDetailsHeader);
   44 |   });
   45 |
   46 |   test('Verify that a new User can be logged in after registering as a new Employee', async ({ page }) => {
   47 |     const pimPage = new PIMPage(page)
   48 |     const loginPage = new LoginPage(page);
   49 |     const basePage = new BasePage(page)
   50 |
   51 |     await pimPage.clickButtonPIM();
   52 |     await pimPage.clickAddEmployeeButton();
   53 |     await pimPage.fillFirstNameField(genUser.firstname);
   54 |     await pimPage.fillMiddleNameField(genUser.middlename);
   55 |     await pimPage.fillLastNameField(genUser.lastname);
   56 |     await pimPage.changeEmployeeID(`${genUser.id}`);
   57 |     await pimPage.clickCreateLoginDetailsButton();
   58 |     const username = await pimPage.fillUsernameField(genUser.username);
   59 |     const password = await pimPage.fillPasswordField(genUser.password);
   60 |     await pimPage.fillConfirmPasswordField(password);
   61 |     await pimPage.checkStatusEnabled();
   62 |     await pimPage.clickSaveButton();
   63 |
   64 |     await expect(await pimPage.successSavedMessage).toBeVisible()
   65 |     await expect(await pimPage.personalDetailsHeader).toContainText(text.pimPage.personalDetailsHeader);
   66 |
   67 |     await pimPage.clickDropdownUserMenu();
   68 |     await pimPage.clickLogoutButton();
   69 |     await loginPage.fillIUsernameField(username);
   70 |     await loginPage.fillpasswordField(password);
   71 |     await loginPage.clickLoginButton();
   72 |     await expect(await basePage.dashboardHeading).toContainText(text.basePage.dashboardHeading);
   73 |   });
   74 |
   75 |   test('Verify that an administrator can successfully edit an employee\'s details', async ({ page }) => {
   76 |     const pimPage = new PIMPage(page)
   77 |     const loginPage = new LoginPage(page);
   78 |     const basePage = new BasePage(page)
   79 |
   80 |     await pimPage.clickButtonPIM();
   81 |     await pimPage.clickAddEmployeeButton();
   82 |     await pimPage.fillFirstNameField(genUser.firstname);
   83 |     await pimPage.fillMiddleNameField(genUser.middlename);
   84 |     await pimPage.fillLastNameField(genUser.lastname);
   85 |     await pimPage.changeEmployeeID(`${genUser.id}`);
   86 |     await pimPage.clickCreateLoginDetailsButton();
   87 |     await pimPage.fillUsernameField(genUser.username);
   88 |     const password = await pimPage.fillPasswordField(genUser.password);
   89 |     await pimPage.fillConfirmPasswordField(password);
   90 |     await pimPage.checkStatusEnabled();
   91 |     await pimPage.clickSaveButton();
   92 |
>  93 |     await expect(await pimPage.successSavedMessage).toBeVisible()
      |                                                     ^ Error: Timed out 5000ms waiting for expect(locator).toBeVisible()
   94 |     await expect(await pimPage.personalDetailsHeader).toContainText(text.pimPage.personalDetailsHeader);
   95 |
   96 |     await pimPage.clickDropdownUserMenu();
   97 |     await pimPage.clickLogoutButton();
   98 |     await loginPage.fillIUsernameField(genUser.adminUsername);
   99 |     await loginPage.fillpasswordField(genUser.adminPassword);
  100 |     await loginPage.clickLoginButton();
  101 |
  102 |     await pimPage.clickButtonPIM();
  103 |     await expect(page).toHaveURL(text.pimPage.url);
  104 |
  105 |     await pimPage.clickFirstPencilIconForEdit()
  106 |     const newLastName = await pimPage.editLastNameInputValue(text.pimPage.editedLastName);
  107 |     await pimPage.clickSavePersonalDetailsButton();
  108 |     await expect(await pimPage.successSavedMessage).toBeVisible()
  109 |
  110 |     await pimPage.clickEmployeeListButton();
  111 |     await expect(await pimPage.getFirstLastNameTableValue()).toBe(newLastName);
  112 |   });
  113 |   
  114 | })
```